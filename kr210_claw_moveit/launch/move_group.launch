<launch>

    <include file="$(find kr210_claw_moveit)/launch/planning_context.launch"/>

    <!-- Bachelor Thesis common settings -->
    <arg name="debug" default="false"/>
    <arg name="planner" default="ompl"/>
    <!--to profile do
     LD_PRELOAD=/usr/lib/libprofiler.so CPUPROFILE=/tmp/geany.prof executable

     env CPUPROFILE=/tmp/my_executable.prof LD_PRELOAD=/usr/lib/libprofiler.so.0 roslaunch dvs_tracking slam_ros.launch
     https://github.com/ethz-asl/programming_guidelines/wiki/Profiling-Code
     google-pprof - -pdf /home/odroid/catkin_ws/devel/lib/PATH_TO_EXECUTABLE  /tmp/my_executable.prof_PID > profile.pdf


     -->

    <!-- GDB Debug Option -->
    <!--arg name="debug" default="false"/-->
    <arg unless="$(arg debug)" name="launch_prefix" value=""/>
    <!-- valgrind - -tool=callgrind - -callgrind-out-file='callgrind.move_group.%p' - -vgdb=yes - -vgdb-error=0"/-->
    <arg if="$(arg debug)" name="launch_prefix" value="gdb -x $(find kr210_claw_moveit)/launch/gdb_settings.gdb --ex run --args"/>

    <!-- Verbose Mode Option -->
    <arg name="info" default="$(arg debug)"/>
    <arg unless="$(arg info)" name="command_args" value=""/>
    <arg if="$(arg info)" name="command_args" value="--debug"/>

    <!-- move_group settings -->
    <arg name="allow_trajectory_execution" default="true"/>
    <arg name="fake_execution" default="false"/>
    <arg name="max_safe_path_cost" default="1"/>
    <arg name="jiggle_fraction" default="0.05"/>
    <arg name="publish_monitored_planning_scene" default="true"/>


    <!--arg name="planner" default="stomp"/-->

    <!-- Planning Functionality -->
    <include ns="move_group" file="$(find kr210_claw_moveit)/launch/planning_pipeline.launch.xml">
        <arg name="pipeline" value="$(arg planner)"/>
    </include>

    <!-- Trajectory Execution Functionality -->
    <include ns="move_group" file="$(find kr210_claw_moveit)/launch/trajectory_execution.launch.xml" if="$(arg allow_trajectory_execution)">
        <arg name="moveit_manage_controllers" value="true"/>
        <arg name="moveit_controller_manager" value="kuka_arm" unless="$(arg fake_execution)"/>
        <arg name="moveit_controller_manager" value="fake" if="$(arg fake_execution)"/>
    </include>

    <!-- Sensors Functionality -->
    <include ns="move_group" file="$(find kr210_claw_moveit)/launch/sensor_manager.launch.xml" if="$(arg allow_trajectory_execution)">
        <arg name="moveit_sensor_manager" value="kuka_arm"/>
    </include>

    <!-- Start the actual move_group node/action server -->
    <node name="move_group" launch-prefix="$(arg launch_prefix)" pkg="moveit_ros_move_group" type="move_group" respawn="false" output="screen" args="joint_states:=/kuka_arm/joint_states $(arg command_args)">
        <!-- Set the display variable, in case OpenGL code is used internally -->
        <env name="DISPLAY" value="$(optenv DISPLAY :0)"/>

        <remap from="/move_group_sensor_input" to="/depth/points"/>
        <!--remap from="/move_group_sensor_input" to="/camera3/depth/points"/-->
        <!--remap from="/move_group_sensor_input" to="/camera2/depth/points"/-->
        <param name="collision_detector" value="my_checker"/>
        <param name="load_octomap_monitor" value="true"/>

        <!--remap from="/move_group/esdf_map_in" to="/voxblox_node/esdf_map_out"/>
        <remap from="/move_group/tsdf_map_in" to="/voxblox_node/tsdf_map_out"/-->
        <param name="voxblox/world_frame" value="base_footprint"/>

        <!-- voxblox settings -->

        <param name="voxblox/tsdf_voxel_size" value="0.05"/>
        <param name="voxblox/tsdf_voxels_per_side" value="16"/>
        <param name="voxblox/voxel_carving_enabled" value="true"/>
        <param name="voxblox/color_mode" value="lambert"/>
        <param name="voxblox/publish_tsdf_map" value="true"/>
        <param name="voxblox/publish_esdf_map" value="true"/>
        <param name="voxblox/publish_tsdf_info" value="true"/>
        <param name="voxblox/use_tf_transforms" value="true"/>
        <param name="voxblox/update_mesh_every_n_sec" value="0.1"/>
        <param name="voxblox/min_time_between_msgs_sec" value="-1"/>
        <param name="voxblox/max_block_distance_from_body" value="10.0"/>
        <param name="voxblox/max_integration_time_s" value="1"/>
        <param name="voxblox/max_ray_length_m" value="10.0"/>
        <param name="voxblox/method" value="fast"/>
        <param name="voxblox/use_const_weight" value="false"/>
        <param name="voxblox/allow_clear" value="true"/>
        <param name="voxblox/verbose" value="false"/>
        <param name="voxblox/esdf_max_distance_m" value="1.5"/>
        <param name="voxblox/esdf_default_distance_m" value="1.5"/>
        <param name="voxblox/esdf_min_diff_m" value="0.03"/>
        <!--remap from="transform" to="/kinect/vrpn_client/estimated_transform" /-->
        <!--rosparam file="$(find voxblox_ros)/cfg/cow_and_lady.yaml"/-->
        <param name="voxblox/mesh_filename" value="$(find voxblox_ros)/mesh_results/$(anon argo).ply"/>

        <param name="voxblox/esdf_update_policy" value="none"/> <!-- none, timed, on_integration-->

        <param name="wait_at_start" value="true"/>

        <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
        <param name="max_safe_path_cost" value="$(arg max_safe_path_cost)"/>
        <param name="jiggle_fraction" value="$(arg jiggle_fraction)"/>


        <param name="capabilities" value="move_group/MoveGroupCartesianPathService           move_group/MoveGroupExecuteService           move_group/MoveGroupKinematicsService           move_group/MoveGroupMoveAction           move_group/MoveGroupPickPlaceAction           move_group/MoveGroupPlanService           move_group/MoveGroupQueryPlannersService           move_group/MoveGroupStateValidationService           move_group/MoveGroupGetPlanningSceneService           move_group/ClearOctomapService           "/>
        <!-- load these non-default MoveGroup capabilities -->
        <!--
        <param name="capabilities" value="
                      a_package/AwsomeMotionPlanningCapability
                      another_package/GraspPlanningPipeline
                      " />
        -->

        <!-- inhibit these default MoveGroup capabilities -->
        <!--
        <param name="disable_capabilities" value="
                      move_group/MoveGroupKinematicsService
                      move_group/ClearOctomapService
                      " />
        -->

        <!-- Publish the planning scene of the physical robot so that rviz plugin can know actual robot -->
        <param name="planning_scene_monitor/publish_planning_scene" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_geometry_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_state_updates" value="$(arg publish_monitored_planning_scene)"/>
        <param name="planning_scene_monitor/publish_transforms_updates" value="$(arg publish_monitored_planning_scene)"/>
    </node>

</launch>